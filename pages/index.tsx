import { Prisma } from '@prisma/client';
import Head from 'next/head';
import { useState } from 'react';
import {
  Container,
  Divider,
  Form,
  Header,
  Table,
  Image,
  Button,
  Icon,
} from 'semantic-ui-react';
import pkg from 'semantic-ui-react/package.json';
import prisma from '../lib/prisma';
import { fetcher } from '../utils/fetcher';

export async function getServerSideProps() {
  const users: Prisma.UserUncheckedCreateInput[] = await prisma.user.findMany();
  return {
    props: {
      initialUsers: users,
    },
  };
}

const options = [
  { key: 'u', text: 'USER', value: 'USER' },
  { key: 'a', text: 'ADMIN', value: 'ADMIN' },
  { key: 'd', text: 'DEVELOPER', value: 'DEVELOPER' },
];

export default function Home({ initialUsers }) {
  const [users, setUsers] =
    useState<Prisma.UserUncheckedCreateInput[]>(initialUsers);
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [avatar, setAvatar] = useState('');
  const [role, setRole] = useState();

  function handleChangeRole(_, { value }) {
    setRole(value);
  }

  function capitalizeFirst(s: string): string {
    return s[0] + s.substring(1).toLowerCase();
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container style={{ margin: 20 }}>
        <Header as="h3">
          This app is powered by NextJS, Semantic UI {pkg.version}
        </Header>
        <Form
          onSubmit={async () => {
            const body: Prisma.UserCreateInput = {
              firstName,
              lastName,
              role,
              email,
              avatar,
            };

            console.log(body);
            await fetcher('/api/create', {
              user: body,
            });
            await setUsers([...users, body]);
            setFirstName('');
            setLastName('');
            setEmail('');
            setAvatar('');
            setRole(null);
          }}
        >
          <Form.Group widths={'equal'}>
            <Form.Input
              fluid
              label="First Name"
              placeholder="First Name"
              value={firstName}
              onChange={e => setFirstName(e.target.value)}
            />
            <br />
            <Form.Input
              fluid
              label="Last Name"
              placeholder="Last Name"
              value={lastName}
              onChange={e => setLastName(e.target.value)}
            />
            <br />
            <Form.Input
              fluid
              label="Avatar"
              placeholder="Avatar"
              value={avatar}
              onChange={e => setAvatar(e.target.value)}
            />
            <br />
            <Form.Input
              fluid
              label="E-mail"
              placeholder="E-mail"
              value={email}
              onChange={e => setEmail(e.target.value)}
            />
            <br />
            <Form.Select
              fluid
              label="Role"
              placeholder="Role"
              options={options}
              value={role}
              onChange={handleChangeRole}
            />
          </Form.Group>
          <br />
          <Form.Button>Submit</Form.Button>
        </Form>

        <Divider horizontal>Users</Divider>

        <Table basic="very" celled collapsing>
          <Table.Header>
            <Table.Row>
              <Table.HeaderCell>User</Table.HeaderCell>
              <Table.HeaderCell>Email</Table.HeaderCell>
              <Table.HeaderCell>Action</Table.HeaderCell>
            </Table.Row>
          </Table.Header>

          <Table.Body>
            {users.map((user, index) => (
              <Table.Row key={index}>
                <Table.Cell>
                  <Header as="h4" image>
                    <Image src={user.avatar} rounded size="mini"></Image>
                    <Header.Content>
                      {user.firstName + ' ' + user.lastName}
                      <Header.Subheader>
                        {capitalizeFirst(user.role)}
                      </Header.Subheader>
                    </Header.Content>
                  </Header>
                </Table.Cell>
                <Table.Cell>{user.email}</Table.Cell>
                <Table.Cell>
                  <Button
                    animated="fade"
                    color="red"
                    onClick={async () => {
                      await fetcher('/api/delete', { id: user.id });
                      await setUsers(users.filter(u => u.id !== user.id));
                    }}
                  >
                    <Button.Content visible>Delete</Button.Content>
                    <Button.Content hidden>
                      <Icon name="user delete"></Icon>
                    </Button.Content>
                  </Button>
                </Table.Cell>
              </Table.Row>
            ))}
          </Table.Body>
        </Table>
      </Container>
    </>
  );
}
